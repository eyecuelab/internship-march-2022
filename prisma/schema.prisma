datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique
  userName String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  trips TripUser[]
  notes    Note[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Trip {
  id String @id @default(cuid())
  tripName String

  tripUsers TripUser[]
  ownerId String

  startDate DateTime?
  endDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TripUser{
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tripId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  isAccepted DateTime?

  expenseTripUsers ExpenseTripUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([tripId, userId])
}

model Expense {
  id String @id @default(cuid())
  expenseName String
  expenseTotal Int

  expenseTripUser ExpenseTripUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model ExpenseTripUser {
  expenseUserId String @id @default(cuid())
  expenseId String
  expense Expense @relation(fields: [expenseId], references: [id])
  tripId String
  userId String
  tripUser TripUser @relation(fields: [tripId, userId], references: [tripId, userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

// This is a small change