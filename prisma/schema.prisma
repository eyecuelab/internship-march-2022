datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  userName  String?
  avatarUrl String?
  password  Password?
  attendees Attendee[] @relation("attendee")
  trips     Trip[]     @relation("trips")
  notes     Note[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Attendee {
  tripId      String
  trip        Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  user        User      @relation(name: "attendee", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) // user ID is for this owner field, id is referencing user id
  expenses    Expense[]
  packingList Item[]
  isAccepted  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([tripId, userId])
}

model Trip {
  id        String     @id @default(cuid())
  ownerId   String
  owner     User       @relation(name: "trips", fields: [ownerId], references: [id])
  attendees Attendee[]
  deciderId String?
  decider  Decider?
  stops     Stop[]
  startDate DateTime?
  endDate   DateTime?
  nickName  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Stop {
  id        String   @id @default(cuid())
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  apiResult String?
  index     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Decider {
  id              String  @id @default(cuid())
  tripId          String
  trip            Trip    @relation(fields: [tripId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  winner          String?
  winnerAvatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id          String   @id @default(cuid())
  description String
  total       Int
  tripId      String
  userId      String
  attendee    Attendee @relation(fields: [tripId, userId], references: [tripId, userId], onUpdate: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Item {
  id          String   @id @default(cuid())
  description String
  tripId      String
  userId      String
  attendee    Attendee @relation(fields: [tripId, userId], references: [tripId, userId], onDelete: Cascade, onUpdate: Cascade)
  isChecked   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
